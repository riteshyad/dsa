//Linear searching

#include<stdio.h>
int main(){
    int n, arr[30], key,i;
    printf("\nEnter the size of array :");
    scanf("%d", &n);

    printf("\nEnter the %d Elements :",n);
    for ( i = 0; i < n; i++){
        scanf("%d", &arr[i]);
    }

    printf("\nEnter the Number to search :");
    scanf("%d",&key);

    for ( i = 0; i < n; i++){
        if(arr[i] == key){
            printf("%d Present at index : %d", key, i);
            break;
        }
    }
    
    if(i == n){
       printf("%d is not present in the array :", key);
    }
    return 0;
}


// ==============================================================================================

// binary searching







// ===========================================================================================
  
//                          SHORTING BY USING C

// ============================================================================================
// bubble sort

#include<stdio.h>
void printArray(int arr[], int size){
    for (int i = 0; i < size; i++){
        printf(" %d ", arr[i]);
    }
    printf("\n");
}

void bubblesort(int arr[], int size){
    for (int j = 0; j <= size-1; j++){
        for(int i = 0; i <= size -j -1; i++){
            if (arr[i] > arr[i+1]){
                int temp = arr[i];
                  arr[i] = arr[i+1];
                arr[i+1] = temp;
            }
        }
    }
    
}

int main(){
    int arr[] = {25, 45, 1, 0, 31, 65, 21, 92, -1, 125};
    int size = sizeof(arr)/sizeof(arr[0]);
    
    printf("\nUnsortetd array is :\n");
    printArray(arr, size);

    bubblesort(arr, size);
    printf("\nSorted array is :\n");
    printArray(arr, size);
    
    return 0;
}


// ================================================================================================

// sellection sort
#include<stdio.h>
void printArray(int arr[], int size){
    for (int i = 0; i < size; i++){
        printf(" %d ", arr[i]);
    }
    printf("\n");
}

void swap(int *a, int *b){
    int temp = *a;
          *a = *b;
          *b = temp;
}

void sellectionSort(int arr[], int size){
    for(int j=0; j < size-1; j++){
        int minidx = j;
        for (int i = j +1; i < size; i++){
            if(arr[i] > arr[minidx]){
               minidx = i;
            }
        }
        swap(&arr[minidx], &arr[j]);
    }
}

int main(){
    int arr[] = {25, 45, 1, 0, 31, 65, 21, 92, -1, 125};
    int size = sizeof(arr)/sizeof(arr[0]);
    
    printf("\nUnsortetd array is :\n");
    printArray(arr, size);

    sellectionSort(arr, size);
    printf("\nSorted array is :\n");
    printArray(arr, size);
    
    return 0;
}


// =====================================================================================

// insertion sort

#include<stdio.h>

void printArray(int arr[], int size){
    for (int i = 0; i < size; i++){
        printf(" %d ", arr[i]);
    }
    printf("\n");
}

void insertionSort(int arr[], int size){
    for (int i = 1; i < size; i++){
        int key = arr[i];
        int j = i-1;

        while(key < arr[j] && j >=  0){
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

int main(){
    int arr[] = {25, 45, 1, 0, 31, 65, 21, 92, -1, 125};
    int size = sizeof(arr)/sizeof(arr[0]);
    
    printf("\nUnsortetd array is :\n");
    printArray(arr, size);

    insertionSort(arr, size);
    printf("\nSorted array is :\n");
    printArray(arr, size);
    
    return 0;
}

// ========================================================================================


//Quick sort
#include<stdio.h>
void swap(int *a, int *b){
    int temp = *a;
          *a = *b;
          *b = temp;
}

int partition(int arr[], int low, int high){
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j < high; j++)
    {
        if (arr[j] <= pivot)
        {
            i++;
            swap(& arr[i], &arr[j]);
        }
    }
    swap(&arr[i+1], &arr[high]);
    return (i+1);
}

void quicksort(int arr[], int low, int high){
    if (low < high){
        int pi = partition(arr, low, high);
        quicksort(arr, low, pi-1);
        quicksort(arr,pi+1, high);
    }
}

void printArray(int arr[], int size){
    for (int i = 0; i < size; i++)
    {
        printf(" %d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr[] = {9, 7, 6, 8, 4, 34, 21, 29, 56, 87};
    int size = sizeof(arr)/sizeof(arr[0]);
    printf("\nUnsorted array is :\n");
    printArray(arr, size);

    quicksort(arr, 0, size-1);
    printf("\nSorted array is :\n");
    printArray(arr, size);

    return 0;
}

// ===============================================================================================================

//Merge sort

#include<stdio.h>

void printArray(int *arr, int size){
    for (int i = 0; i < size; i++)
    {
        printf(" %d ", arr[i]);
    }
    printf("\n");
}

void merge(int arr[], int mid, int low, int high){
    int i, j, k, b[100];
    i = low;
    j = mid+1;
    k = low;
    while (i <= mid && j <= high){
        if(arr[i] < arr[j]){
            b[k] = arr[i];
            i++;
            k++;
        }
        else{
            b[k] = arr[j];
            j++;
            k++;
        }
    }   

        while (i <= arr[mid]){
            b[k] = arr[i];
            k++;
            i++;
        }

        while(j <= arr[high]){
            b[k] = arr[j];
            k++;
            j++;
        }

        for (int i = low; i < high; i++){
            arr[i] = b[k];
        } 
}

void mergeSort(int arr[], int low, int high){
    int mid;
    if(low < high){
        mid = low + (high - low)/2;
        mergeSort(arr, low, mid);
        mergeSort(arr, mid+1, high);

        merge(arr, mid, low, high);
    }
}

int main(){
    int arr[]= {2, 25, 9, 69, 1, 85, 3 };
    int size = sizeof(arr)/sizeof(arr[0]);
    
    printf("\nUnsorted array is:\n ");
    printArray(arr , size);

    mergeSort(arr , 0 , size);
    printf("\nSorted array is:\n");
    printArray(arr , size);
    return 0;
}

// ======================================================================================================


// Heap sort


#include<stdio.h>

void printArray(int arr[], int n){
  for (int i = 0; i < n; i++)
  {
    printf("%d ", arr[i]);
  } 
    printf("\n");
}

void swap(int *a, int *b){
    int temp = *a;
          *a = *b;
          *b = temp;
}

void heapify(int arr[], int n, int i){
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
    {
        largest = left;
    }

    if (right < n && arr[right] > arr[largest])
    {
        largest = right;
    }

    if (largest != i)
    {
        swap(& arr[i], &arr[largest]);
        heapify(arr, n, i);
    }
}

void heapSort(int arr[], int n){
    for(int i = n / 2 - 1; i >= 0; i--){
        heapify(arr, n , i);
    }

    for(int i = n - 1; i >= 0; i--){
        swap(&arr[0], &arr[i]);
        heapify(arr, i, 0);
    }
}

int main()
{
    int arr[]= {1, 12, 9, 5, 7, 25};
    int n = sizeof(arr)/sizeof(arr[0]);

    printf("\nUnsorted array is: \n");
    printArray(arr, n);

   // printf("\n");

    heapSort(arr , n);
    printf("\nSorted array is: \n");
    printArray(arr , n);
   
    return 0;
}



//=======================================================================================================
